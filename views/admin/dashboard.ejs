<!--  Row 1 -->
<style>
  .downloadbtn{
    margin-bottom:1rem ;
    margin-top:1rem ;
    margin-left: 2rem;
    margin-right: 2rem;
  }
  .choose-date-btn{
    margin-bottom:1rem ;
    margin-top:1rem ;
    margin-left: 1rem;
    margin-right: 1rem;
  }
  
  .buttondiv{
    display: flex;
    justify-content: flex-end;
  }
  .custom-payment-desc {
  font-size: 18px;
}

@media (max-width: 767px) {
  .custom-payment-desc {
    font-size: 9px !important; /* Adjust this to your preferred smaller font size */
  }
}

@media (max-width: 768px) {
  /* Reduce font size for headers and data cells */
  th, td {
    font-size: 12px; /* Adjust font size for mobile view */
  }

  /* Adjust padding for headers and data cells as needed for mobile view */
  th {
    padding: 8px;
  }

  td {
    padding: 6px;
  }
  .fw-semibold {
    font-weight: 400 !important;
    font-size: 10px;
  }

  td h6 {
    text-align: center;
  }

  .badge {
    font-size: 12px;
    padding: 4px 8px;
  }
}




</style>

</div>
  <div class="container-fluid">
    <!--  Row 1 -->
    <div class="row">
      <div class="col-lg-8 d-flex align-items-strech" style="vertical-align: middle;">
        <div class="card w-100">
          <div class="card-body">
            <div class="d-sm-flex d-block align-items-center justify-content-between mb-9">
              <div class="mb-3 mb-sm-0">
                <h5 class="card-title fw-semibold">Sales Overview</h5>
              </div>
              <div>
                  <select class="form-select" id="monthSelector">
                    <option value="0" selected>Six Months</option>
                    <option value="1">One Year</option>
                  </select>
              </div>
            </div>
            <canvas id="lineChart"></canvas>
          </div>
        </div>
      </div>
      <div class="col-lg-4">
        <div class="row">
          <div class="col-lg-12">
            <!-- Yearly Breakup -->
            <div class="card overflow-hidden">
              <div class="card-body p-4">
                <h5 class="card-title mb-9 fw-semibold">Yearly Breakup</h5>
                <div class="row align-items-center">
                  <div class="col-6">
                    <h4 class="fw-semibold mb-3">&#8377<span id="totalRevenue"></span></h4>
                    <div class="d-flex align-items-center mb-3">
                      
                      <p class="text-dark me-1 fs-3 mb-0" id="percentageChange"></p>
                      <p class="fs-3 mb-0">last year</p>
                    </div>
                    <div class="d-flex align-items-center">
                      <div class="me-4">
                        <span class="round-8 bg-primary rounded-circle me-2 d-inline-block"></span>
                        <span class="fs-2">2023</span>
                      </div>
                      <div>
                        <span class="round-8 bg-light-primary rounded-circle me-2 d-inline-block"></span>
                        <span class="fs-2">2023</span>
                      </div>
                    </div>
                  </div>
                  <div class="col-6">
                    <div style="width: 8rem;" class="d-flex justify-content-start">
                      <canvas id="doughnutChart" width="400" height="400"></canvas>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
          </div>
          <div class="col-lg-12">
            <!-- Monthly Earnings -->
            <div class="card">
              <div class="card-body">
                <div class="row align-items-start">
                  <div class="col-8">
                    <h5 class="card-title mb-9 fw-semibold">Category Insights</h5>
                    <div class="d-flex align-items-center pb-1">
                      <span class="me-2 rounded-circle bg-light-danger round-20 d-flex align-items-center justify-content-center">
                        <i class="ti ti-package"></i></span>
                      <p class="text-dark me-1 fs-3 mb-0">Total : <span id="total-orders"></span></p>
                    </div>
                  </div>
                  <div class="col-4">
                    <div class="d-flex justify-content-end">
                      <div class="text-white bg-secondary rounded-circle p-6 d-flex align-items-center justify-content-center">
                        <i class="ti ti-file-description"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div id="product-sales-chart"></div>
            </div>
            
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-lg-4 d-flex align-items-stretch">
        <div class="card w-100" style="align-items: center;">
          <h5 class="card-title fw-semibold" style="margin-top: 2rem;">Download Sales Report</h5>
      
          <div style="display: flex; flex-direction: column; align-items: center; vertical-align: middle;">
            <div class="choose-date-btn" style="display: flex; flex-wrap: wrap; justify-content: space-between;">
              <div style="width: 48%;"> <!-- Adjust the width to make it smaller and leave some space between elements -->
                <label for="startDate">Start Date:</label>
                <input type="date" class="form-control" id="startDate">
              </div>
              <div style="width: 48%;"> <!-- Adjust the width to make it smaller and leave some space between elements -->
                <label for="endDate">End Date:</label>
                <input type="date" class="form-control" id="endDate">
              </div>
            </div>
            <div style="margin-top: 1rem;"> <!-- Add margin for spacing -->
              <select class="form-select choose-btn" id="reportType">
                <option value="monthly" selected>Monthly Data</option>
                <option value="weekly">Weekly Data</option>
              </select>
            </div>
            <div class="btn btn-primary downloadbtn" id="downloadButton" style="margin-top: 1rem;"> <!-- Add margin for spacing -->
              Download
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-lg-8 d-flex align-items-stretch">
        <div class="card w-100">
          <div class="card-body p-4">
            <h5 class="card-title fw-semibold mb-4">Users Joined</h5>
            <div class="table-responsive">
              <table class="table text-nowrap mb-0 align-middle">
                <thead class="text-dark fs-4">
                  <tr>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">no.</h6>
                    </th>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Name</h6>
                    </th>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Mob</h6>
                    </th>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Joined Date</h6>
                    </th>
                    
                  </tr>
                </thead>
                <tbody>
                  <% let number = 1; %>
                  <% allUsers.forEach(user => { %>
                    <tr>
                      <td class="border-bottom-0"><h6 class="fw-semibold mb-0"><%= number %></h6></td>
                      <td class="border-bottom-0">
                        <h6 class="fw-semibold mb-1"><%= user.name %></h6>
                      </td>
                      <td class="border-bottom-0">
                        <p class="mb-0 fw-normal"><%= user.phoneNumber %></p>
                      </td>
                      <td class="border-bottom-0">
                        <div class="d-flex align-items-center gap-4">
                          <span class="badge bg-success rounded-3 fw-semibold mx-auto">
                            <% const createdAtDate = new Date(user.createdAt); %>
                            <%= createdAtDate.toLocaleDateString('en-US', {
                              day: 'numeric',
                              month: 'short',
                              hour: 'numeric',
                              minute: 'numeric',
                            }) %>
                          </span>
                        </div>
                      </td>
                    </tr>  
                    <% number++; %>
                  <% }); %>
                </tbody>
                
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
    <div class="col-lg-7 d-flex align-items-stretch">
      <div class="card w-100" style="margin-right: 1rem;">
        <div class="card-body p-4" style="max-height: 24rem;overflow: auto;">
          <div class="mb-4">
            <h5 class="card-title fw-semibold">Recent Transactions</h5>
          </div>
          <ul class="timeline-widget mb-0 position-relative mb-n5">
            <% payments.forEach((payment, index) => { %>
              <li class="timeline-item d-flex position-relative overflow-hidden">
                <div class="timeline-time text-dark flex-shrink-0 text-end"><%= payment.timestamp.toLocaleString() %></div>
                <div class="timeline-badge-wrap d-flex flex-column align-items-center">
                  <span class="timeline-badge border-2 border border-primary flex-shrink-0 my-8"></span>
                  <% if (index !== payments.length - 1) { %>
                    <span class="timeline-badge-border d-block flex-shrink-0"></span>
                  <% } %>
                </div>
                <div class="timeline-desc fs-3 text-dark mt-n1 custom-payment-desc">
                  Payment received from <%= payment.user?.name || 'Unknown User' %> of &#8377 <%= payment.amount %>
                </div>
                
              </li>
            <% }) %>
          </ul>
          
        </div>
      </div>
    </div>
    <div class="col-lg-5 d-flex align-items-stretch">
      <div class="card w-100">
        <div class="card-body p-4"style="max-height: 24rem;overflow: auto;">
          <div class="mb-4">
            <h5 class="card-title fw-semibold">Requests in Pending</h5>
          </div>
          <div class="table-responsive">
            <table class="table text-nowrap mb-0 align-middle">
              <thead class="text-dark fs-4">
                <tr>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">Order</h6>
                  </th>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">time</h6>
                  </th>
                 
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">status</h6>
                  </th>
                  
                </tr>
              </thead>
              <tbody>
                <% orders.forEach(order => { %>
                  <tr>
                    <td class="border-bottom-0"><h6 class="fw-semibold mb-0">#<%= order.orderNumber %></h6></td>
                    <td class="border-bottom-0">
                      <h6 class="fw-semibold mb-0"><%= order.date.toLocaleDateString() %></h6>
                      <p class="mb-0"><%= order.date.toLocaleTimeString() %></p> <!-- Display time below the date -->
                    </td>
                  
                    <td class="border-bottom-0">
                      <div class="d-flex align-items-center gap-4">
                        <% if (order.status === 'cancelPending')  {%>
                        <span class="badge bg-info rounded-3 fw-semibold mx-auto">
                          Cancel requested 
                        </span>
                        <% } else if (order.status === 'returnPending')  {%>
                          <span class="badge bg-danger rounded-3 fw-semibold mx-auto">
                            Return requested 
                          </span>
                        <% } %>
                      </div>
                    </td>
                  </tr>
                <% }); %>
                
              </tbody>
              
            </table>
            <a href="/admin/orders" class="btn btn-info">Go to all orders</a>
          </div>
        </div>
        
      </div>
    </div>
   </div>
    
  
  </div>
</div>
</div>


<script>
  // Get references to the HTML elements
  const startDateInput = document.getElementById("startDate");
  const endDateInput = document.getElementById("endDate");
  const reportTypeSelect = document.getElementById("reportType");
  const downloadButton = document.getElementById("downloadButton");

  // Function to update dates based on report type
  function updateDates() {
    const reportType = reportTypeSelect.value;
    let startDate, endDate;

    if (reportType === "monthly") {
      // Calculate one month back from today
      const currentDate = new Date();
      const oneMonthAgo = new Date(currentDate);
      oneMonthAgo.setMonth(currentDate.getMonth() - 1);

      // Format the start and end dates as YYYY-MM-DD
      startDate = oneMonthAgo.toISOString().split("T")[0];
      endDate = currentDate.toISOString().split("T")[0];
    } else if (reportType === "weekly") {
      // Calculate one week back from today
      const currentDate = new Date();
      const oneWeekAgo = new Date(currentDate);
      oneWeekAgo.setDate(currentDate.getDate() - 7);

      // Format the start and end dates as YYYY-MM-DD
      startDate = oneWeekAgo.toISOString().split("T")[0];
      endDate = currentDate.toISOString().split("T")[0];
    }

    // Set the input values to the calculated dates
    startDateInput.value = startDate;
    endDateInput.value = endDate;
  }

  // Add a change event listener to the report type dropdown
  reportTypeSelect.addEventListener("change", updateDates);

  // Add a click event listener to the download button
  downloadButton.addEventListener("click", function () {
    const startDate = startDateInput.value;
    const endDate = endDateInput.value;
    const reportType = reportTypeSelect.value;

    // Construct the request body
    const requestBody = {
      startDate,
      endDate,
      reportType,
    };

    // Construct the URL for your server endpoint
    const url = "/admin/download-report";

    // Use fetch to send a POST request to the server with the request body
    fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    })
      .then((response) => {
        // Check if the response status is OK (200)
        if (response.status === 200) {
          response.blob().then((blob) => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.style.display = "none";
            a.href = url;
            a.download = "sales_report.pdf";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
          });
        } else {
          // Handle error responses from the server here
          console.error("Server error:", response.statusText);
        }
      })
      .catch((error) => {
        console.error("Fetch error:", error);
      });
  });

  // Initialize the dates based on the initial report type
  updateDates();
</script>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<script>
  document.addEventListener("DOMContentLoaded", function () {

  var ctx = document.getElementById('lineChart').getContext('2d');
  
  let selectedOption = 0;
  
  fetchSalesData(selectedOption);
  
  let monthSelector = document.getElementById('monthSelector');
  monthSelector.addEventListener('change', function() {
    selectedOption = parseInt(monthSelector.value);
    console.log(selectedOption);
    
    fetchSalesData(selectedOption);

    myChart.update();
  });

  function assignData(newData) {
    myChart.data.datasets[0].data = newData;
    myChart.update();
  }
  function assignMonths(newData) {
    myChart.data.labels = newData;
    myChart.update();
  }

  // Function to fetch sales data
  function fetchSalesData(option) {
    fetch("/admin/sales-data", {
      method: 'POST',
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ option: option }) // Send the selected option as JSON
    })
    .then(response => response.json())
    .then(data => {
      if (data.orderCountsLastSixMonths) {
        assignData(data.orderCountsLastSixMonths);
      }
      else if (data.orderCountsByMonth) {
        console.log(data.orderCountsByMonth);
        assignData(data.orderCountsByMonth)
      }
    
      assignMonths(data.monthx);
    
    })
    .catch(error => {
      console.error('Error fetching sales data:', error);
    });
  }




  var data = {
    labels: [],
    datasets: [
      {
        label: 'Monthly Sales',
        data: [],
        borderColor: 'rgb(30, 144, 255)',
        borderWidth: 4,
        fill: false,
        tension: 0.4,
      }
    ]
  };

  const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Monthly Sales Data',
        font: {
          size: 20,
          family: 'Arial, sans-serif', // Customize font family
          color: 'rgb(75, 192, 192)', // Customize font color
        },
      },
    },
    scales: {
      x: {
        title: {
          display: true,
          text: 'Months',
          font: {
            size: 16,
            family: 'Arial, sans-serif',
            color: 'rgb(0, 0, 0)',
          },
        },
        ticks: {
          font: {
            size: 12,
            family: 'Arial, sans-serif',
            color: 'rgb(0, 0, 0)',
          },
        },
      },
      y: {
        title: {
          display: true,
          text: 'Sales',
          font: {
            size: 16,
            family: 'Arial, sans-serif',
            color: 'rgb(0, 0, 0)',
          },
        },
        ticks: {
          font: {
            size: 12,
            family: 'Arial, sans-serif',
            color: 'rgb(0, 0, 0)',
          },
        },
      },
    },
  },
};

  var myChart = new Chart(ctx, config);
 })
</script>
>



<script>
  var ctxDoughnut = document.getElementById('doughnutChart').getContext('2d');

  var doughnutData = {
    labels: ['This Year', 'Last Year'],
    datasets: [{
      data: [], // Placeholder for dynamic data
      backgroundColor: ['#5d87ff', '#4a6ccc'],
      borderWidth: 2
    }]
  };

  var doughnutConfig = {
    type: 'doughnut',
    data: doughnutData,
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: true,
          position: 'bottom'
        }
      }
    }
  };

  var doughnutChart = new Chart(ctxDoughnut, doughnutConfig);

  fetch("/admin/doughnut-data", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    }
  })
  .then(response => response.json())
  .then(data => {
    console.log(data.totalAmount+"😍😍💋💋");
    const totalRevenue = document.getElementById('totalRevenue');
    if (totalRevenue) {
      totalRevenue.textContent = data.totalAmount.toFixed(2);
    }

    const percentageChange = data.percentageChange;
    const percentageChangeElement = document.getElementById('percentageChange');
    
    // Specify the number of decimal places you want
    const decimalPlaces = 2;
    
    if (percentageChange < 0) {
      // If the percentage change is negative, show a down arrow and the absolute value
      percentageChangeElement.innerHTML = `<i class="ti ti-arrow-down-right text-danger"></i> ${Math.abs(percentageChange).toFixed(decimalPlaces)}%`;
    } else {
      // If the percentage change is non-negative, show an up arrow and the value
      percentageChangeElement.innerHTML = `<i class="ti ti-arrow-up-right text-success"></i> ${percentageChange.toFixed(decimalPlaces)}%`;
    }
    assignDataThisYear(data.currentYear);
    assignDataLastYear(data.lastYear);

    doughnutChart.update(); // Update the chart with new data
  });

  function assignDataThisYear(newData) {
    doughnutData.datasets[0].data[0] = newData;
  }

  function assignDataLastYear(newData) {
    doughnutData.datasets[0].data[1] = newData;
  }
</script>


<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>




<script>
  document.addEventListener("DOMContentLoaded", function () {
    var ctxApex = document.getElementById('product-sales-chart');

    var productSalesOptions = {
      chart: {
        type: 'polarArea',
        height: 350
      },
      labels: [],
      series: [],
      colors: ['#66a3ff', '#ffcc80', '#a5d6a7', '#ffab91', '#b39ddb'],
      responsive: [{
        breakpoint: 480,
        options: {
          chart: {
            width: 200
          },
          legend: {
            position: 'bottom'
          }
        }
      }],
      dataLabels: {
        enabled: false
      }
    };

    var productSalesChart = new ApexCharts(ctxApex, productSalesOptions);
    productSalesChart.render();

    fetch("/admin/polarGraph-data", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log(data);
      assignData(data.orderCountsByCategory);
      assignCategoryName(data.categoryNames);
      console.log(data.totalOrders);


    const totalOrdersElement = document.getElementById('total-orders');
    if (totalOrdersElement) {
     totalOrdersElement.textContent = data.totalOrders;
    }
    })
    .catch(error => {
      console.error("Error fetching data:", error);
    });

    function assignData(newData) {
        productSalesChart.updateOptions({
          series: newData
        });
      }
    function assignCategoryName(newData) {
        productSalesChart.updateOptions({
          labels: newData
        });
      }
  });
</script>

</html>


