<script>
    // Get the modal element
    var modal = document.getElementById('addAddressModal');
  
    // Get the button that opens the modal
    var addAddressBtn = document.getElementById('addAddressBtn');
  
    // Get the <span> element that closes the modal
    var closeBtn = modal.querySelector('.close');
  
    // Open the modal when the button is clicked
    addAddressBtn.addEventListener('click', function() {
      modal.style.display = 'block';
    });
  
    // Close the modal when the close button or outside the modal is clicked
    closeBtn.addEventListener('click', closeModal);
    window.addEventListener('click', outsideClick);
  
    function closeModal() {
      modal.style.display = 'none';
    }
  
    function outsideClick(e) {
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    }
  
    document.addEventListener('DOMContentLoaded', () => {
      let couponInput = document.getElementById('couponName');
      let errMsg = document.getElementById('error-msg');
      let applyButton = document.getElementById('apply-coupon');
      let totalElement = document.getElementById('totalAmountSpn');
      let discountElement = document.getElementById('coupon-discount');
      let walletBalanceElement = document.getElementById('walletBalance');
      let walletDiscount = document.getElementById('wallet-discount');
  
      let total = +totalElement.textContent;
      let discount = +discountElement.textContent;
  
  
      couponInput.addEventListener('input', () => {
        errMsg.textContent = '';
        couponInput.style.border = '';
        couponInput.style.borderRadius = '';
        couponInput.style.paddingRight = '';
  
        if (applyButton.style.display == 'none') {
          applyButton.style.display = 'block';
        }
  
  
        discountElement.textContent = 0;
        if (discount > 0) {
          totalElement.textContent = Math.floor(total + discount);
        }
  
        fetch('/remove-coupon', {
          method: 'put',
        }).then(async (res) => {
          res = await res.json()
          console.log(res.message);
        }).catch((err) => {
          console.log(err);
        })
  
      });
  
      applyButton.addEventListener('click', (event) => {
        event.preventDefault();
        const couponName = document.getElementById('couponName').value;
        const url = '/apply-coupon';
        fetch(url, {
          method: 'post',
          body: JSON.stringify({
            couponName: couponName
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(async (res) => {
          res = await res.json();
          console.log(res);
  
          if (res.success) {
            //apply discount amount
            discountElement.textContent = res.discount.toFixed(2);
            let totalAmount = +totalElement.textContent;
            totalAmount = totalAmount - res.discount;
            totalElement.textContent = Math.floor(totalAmount)
  
            //show success message
            errMsg.style.color = 'green';
            errMsg.textContent = res.message;
            couponInput.style.border = '1px solid green';
            couponInput.style.borderRadius = '50px';
            couponInput.style.paddingRight = '30px';
            applyButton.style.display = 'none';
  
            setTimeout(() => {
              errMsg.textContent = '';
            }, 5000);
  
          } else {
            errMsg.style.color = 'red';
            errMsg.textContent = res.message;
            couponInput.style.border = '1px solid red';
            couponInput.style.borderRadius = '50px';
            couponInput.style.paddingRight = '30px';
            applyButton.style.display = 'block';
  
            setTimeout(() => {
              errMsg.textContent = '';
              couponInput.style.border = '';
              couponInput.style.borderRadius = '';
              couponInput.style.paddingRight = '';
            }, 5000);
          }
        }).catch(err => {
          console.log(err);
        });
      });
      let walletForm = document.getElementById('walletForm');
  
      walletForm.addEventListener('submit', (event) => {
        event.preventDefault();
        let cartAmount = '<%= cart.total %>'
        let walletAmount = '<%= walletAmount %>'
        let msg = document.getElementById('message')
  
        let maxAmount;
  
        if (Math.floor(walletAmount) > cartAmount) {
          maxAmount = cartAmount;
        } else {
          maxAmount = walletAmount;
        }
        let walletInput = +document.getElementById('wallet-input').value;
  
        if (walletInput > maxAmount) {
          msg.style.color = 'red'
          msg.style.fontWeight = '700'
          setTimeout(() => {
            msg.style.color = 'black'
            msg.style.fontWeight = 'normal'
  
          }, 3000);
          return;
        }
  
        fetch('/apply-wallet', {
          method: 'post',
          body: JSON.stringify({
            walletInput
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(res => {
          return res.json()
        }).then(res => {
          console.log(res);
          if (res.success) {
            totalElement.textContent = Math.floor(res.cartTotal);
            walletBalanceElement.textContent = Math.floor(res.walletBalance);
            walletDiscount.textContent = Math.floor(walletInput);
          } else {
            setTimeout(() => {
              document.getElementById('error-msg2').style.color = 'red'
              document.getElementById('error-msg2').textContent = res.message;
  
            }, 5000);
  
          }
  
        }).catch(error => {
          console.log(error);
        })
  
      })
  
    });
    let selectedAddress = null
  
    function selectAddress(addressId) {
      const cards = document.querySelectorAll(".card");
      cards.forEach((card) => {
        if (card.getAttribute("addressId") === addressId) {
          card.classList.add("active");
          selectedAddress = card.getAttribute("addressId");
        } else {
          card.classList.remove("active");
        }
  
      });
    }
  
    const form = document.querySelector('#addNewAddress');
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      const fnameError = document.querySelector('#fnameError');
      const lnameError = document.querySelector('#lnameError');
      const countryError = document.querySelector('#countryError');
      const billingAddressError = document.querySelector('#billingAddressError');
      const cityError = document.querySelector('#cityError');
      const stateError = document.querySelector('#stateError');
      const postError = document.querySelector('#postError');
      const phoneError = document.querySelector('#phoneError');
      const emailError = document.querySelector('#emailError');
  
  
      fnameError.innerHTML = ''
      lnameError.innerHTML = ''
      countryError.innerHTML = ''
      billingAddressError.innerHTML = ''
      cityError.innerHTML = ''
      stateError.innerHTML = ''
      postError.innerHTML = ''
      phoneError.innerHTML = ''
      emailError.innerHTML = ''
  
      const formData = new FormData(form);
  
      let hasError = false;
  
      if (formData.get('fname').trim() === '') {
        hasError = true;
        fnameError.innerHTML = '<p style="color:red">Please enter your first name.</p>';
        setTimeout(() => {
          fnameError.innerHTML = ''
        }, 5000);
        return;
      }
  
      if (formData.get('lname').trim() === '') {
        hasError = true;
        lnameError.innerHTML = '<p style="color:red">Please enter your last name.</p>';
        setTimeout(() => {
          lnameError.innerHTML = ''
        }, 5000);
        return;
  
      }
      if (formData.get('country').trim() === '') {
        hasError = true;
        countryError.innerHTML = '<p style="color:red">Please select any country.</p>';
        setTimeout(() => {
          countryError.innerHTML = ''
  
        }, 5000);
        return;
  
      }
  
      if (formData.get('street_address').trim() === '') {
        hasError = true;
        billingAddressError.innerHTML = '<p style="color:red">Please enter your billing address.</p>';
        setTimeout(() => {
          billingAddressError.innerHTML = '';
        }, 5000);
        return;
  
      }
  
  
      if (formData.get('city').trim() === '') {
        hasError = true;
        cityError.innerHTML = '<p style="color:red">Please enter your city/town.</p>';
        setTimeout(() => {
          cityError.innerHTML = '';
        }, 5000);
        return;
  
      }
  
      if (formData.get('state').trim() === '') {
        hasError = true;
        stateError.innerHTML = '<p style="color:red">Please enter your state/province.</p>';
        setTimeout(() => {
          stateError.innerHTML = '';
        }, 5000);
        return;
  
      }
  
      if (formData.get('zipcode').trim() === '') {
        hasError = true;
        postError.innerHTML = '<p style="color:red">Please enter your postcode/ZIP code.</p>';
        setTimeout(() => {
  
          postError.innerHTML = '';
        }, 5000);
        return;
  
      }
  
      if (formData.get('phone').trim() === '') {
        hasError = true;
        phoneError.innerHTML = '<p style="color:red">Please enter your phone number.</p>';
        setTimeout(() => {
          phoneError.innerHTML = '';
        }, 5000);
        return;
  
      }
  
      if (formData.get('email').trim() === '') {
        hasError = true;
        emailError.innerHTML = '<p style="color:red">Please enter your email address.</p>';
        setTimeout(() => {
          emailError.innerHTML = '';
        }, 5000);
        return;
  
      }
  
      if (!hasError) {
  
        const formObject = {};
        formData.forEach(function(value, key) {
          formObject[key] = value;
        });
  
        const url = '/add-address';
        fetch(url, {
            method: 'POST',
            body: JSON.stringify(formObject),
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(async (response) => {
            console.log(response);
            const msg = await response.json()
            console.log(msg);
            if (msg.message) {
              if (msg.message.includes('fname')) {
                msg.error = 'Please enter a first name';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('lname')) {
                msg.error = 'Please enter a last name';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('street_address')) {
                msg.error = 'Please enter a street address';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('city')) {
                msg.error = 'Please enter a city';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('state')) {
                msg.error = 'Please enter  a state';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('zipcode')) {
                msg.error = 'Please enter a valid  zip code';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('country')) {
                msg.error = 'Please select a valid country';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('phone')) {
                msg.error = 'Please enter a valid phone number';
                callAlert(msg.error)
                return;
              }
              if (msg.message.includes('email')) {
                msg.error = 'Please enter a valid email address';
                callAlert(msg.error)
                return;
              }
  
            }
  
            function callAlert(errorMessage) {
              Swal.fire({
                title: 'Oops!',
                icon: 'error',
                text: 'Something went wrong!' + errorMessage,
                showCloseButton: true,
              })
            }
  
            window.location.reload();
  
          })
          .catch(error => {
            console.error(error);
          });
  
      }
    });
  
  
    document.getElementById('placeOrder').addEventListener('click', (event) => {
      event.preventDefault();
  
  
      const selectedcard = document.getElementById('cardBodyId');
  
      if (!selectedcard || !selectedAddress) {
        Swal.fire({
          title: 'Oops!',
          icon: 'error',
          text: !selectedcard ? 'please add a address' : 'please select address',
          showCloseButton: true,
        })
        return;
      }
  
      const paymentOptions = document.getElementsByName("payment_option");
      // Loop through the radio buttons to find the selected one
      let selectedPaymentOption;
      for (let i = 0; i < paymentOptions.length; i++) {
        if (paymentOptions[i].checked) {
          selectedPaymentOption = paymentOptions[i].id;
          break;
        }
      }
  
      const obj = {
        paymentmethod: selectedPaymentOption,
        addressId: selectedAddress
      }
  
      fetch('/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(obj),
      }).then(async (response) => {
        return await response.json()
      }).then((response) => {
        console.log(response);
        if (response.success) {
          if (response.paymethod === 'COD') {
            const id = response.orderId
            window.location.href = `/order-successfull/${id}`;
          } else if (response.paymethod === 'ONLINE') {
            razorpayPayment(response.order)
          }
        }
  
      }).catch((error) => {
        console.log(error);
      })
  
    })
  
  
    function razorpayPayment(order) {
      console.log(order);
      var options = {
        "key": "rzp_test_YNltnS1mdzdtvV", // Enter the Key ID generated from the Dashboard
        "amount": order.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
        "currency": "INR",
        "name": "traction", //your business name
        "description": "Test Transaction",
        "image": "/user/assets/imgs/theme/logo.svg",
        "order_id": order.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
        "handler": function(response) {
          // alert(response.razorpay_payment_id);
          // alert(response.razorpay_order_id);
          // alert(response.razorpay_signature)
          verifyPayment(response, order);
        },
        "prefill": {
          "name": "Gaurav Kumar", //your customer's name
          "email": "gaurav.kumar@example.com",
          "contact": "9000090000"
        },
        "notes": {
          "address": "Razorpay Corporate Office"
        },
        "theme": {
          "color": "#3399cc"
        }
      };
  
      var rzp1 = new Razorpay(options);
  
      rzp1.on('payment.failed', function(response) {
        window.location.href = `/order-failed/${order.receipt}`
      });
      rzp1.open();
    }
  
    function verifyPayment(payment, order) {
      $.ajax({
        type: 'post',
        url: '/verify-payment',
        data: {
          payment,
          order
        },
        success: (response) => {
          const id = order.receipt;
          console.log(order.receipt);
          if (response.success) {
            window.location.href = `/order-successfull/${id}`;
          } else {
            window.location.href = `/order-failed/${id}`;
          }
        }
      })
    }
  </script>